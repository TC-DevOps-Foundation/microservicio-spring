# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- feature-ms-TomasCastro-mensaje

jobs:
- job:
  pool:
    vmImage: ubuntu-latest
  displayName: Build

  steps:

  - script: |
      git fetch --unshallow
    displayName: 'convert to non-shallow clone' 


  - task: Gradle@3
    inputs:
      gradleWrapperFile: 'gradlew'
      tasks: 'build jacocoTestReport'
      publishJUnitResults: true
      testResultsFiles: '**/TEST-*.xml'
      javaHomeOption: 'JDKVersion'
      sonarQubeRunAnalysis: false
      spotBugsAnalysis: false
    displayName: Build


  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: 'JaCoCo'
      summaryFileLocation: '$(System.DefaultWorkingDirectory)/build/reports/jacoco/test/jacocoTestReport.xml'
      pathToSources: '$(System.DefaultWorkingDirectory)/src/main/java/'
      reportDirectory: '$(System.DefaultWorkingDirectory)/build/reports/jacoco/test'
      failIfCoverageEmpty: true

  - task: PowerShell@2
    inputs:
      targetType: 'inline'
      script: |
        $reportFile = Get-ChildItem -Path $(System.DefaultWorkingDirectory)/build/reports/jacoco/test/jacocoTestReport.xml
        $content = Get-Content -Path $reportFile
        $xmlDoc = New-Object -TypeName System.Xml.XmlDocument
        $xmlDoc.LoadXml($content)
        $coverageNode = $xmlDoc.SelectNodes("/report/counter[@type='INSTRUCTION']")[0]
        $covered = [double]$coverageNode.GetAttribute("covered")
        $missed = [double]$coverageNode.GetAttribute("missed")
        $coveragePercentage = $covered / ($covered + $missed) * 100
        if ($coveragePercentage -lt 70) {
          $coverageResult = $coveragePercentage.ToString("F2")
          Write-Host "El porcentaje de cobertura de c贸digo es $coverageResult%"
          Write-Host "La cobertura de c贸digo es inferior al 85% aceptado. Se detiene el pipeline."
          exit 1
        } else {
          $coverageResult = $coveragePercentage.ToString("F2")
          Write-Host "El porcentaje de cobertura de c贸digo es $coverageResult%"
          Write-Host "La cobertura de c贸digo es superior al 85%. Se sigue flujo de pipeline."
        }
    displayName: "Verificar resultados Jacoco"


#- task: SonarCloudPrepare@1
#  inputs:
#    SonarCloud: 'Sonar-Azure'
#    organization: 'tc-devops-foundation'
#    scannerMode: 'MSBuild'
#    projectKey: 'TC-DevOps-Foundation_microservicio-spring'
#    projectName: 'microservicio-spring'
#  displayName: SonarCloud

#- task: Gradle@3
#  inputs:
#    gradleWrapperFile: 'gradlew'
##    workingDirectory: '$(Build.SourcesDirectory)'
#    publishJUnitResults: true
#    testResultsFiles: '*/TEST-.xml'
#    javaHomeOption: 'JDKVersion'
#    sonarQubeRunAnalysis: false
#    spotBugsAnalysis: false
#  displayName: 'Run test'

#- task: Gradle@3
#  inputs:
#    gradleWrapperFile: 'gradlew'
#    tasks: 'sonar'
#    publishJUnitResults: false
#    javaHomeOption: 'JDKVersion'
#    sonarQubeRunAnalysis: true
#    sqGradlePluginVersionChoice: 'specify'
#    sonarQubeGradlePluginVersion: '3.3'
#    spotBugsAnalysis: false

  - task: Docker@2
    inputs:
      containerRegistry: 'Docker'
      command: 'login'
    displayName: Docker Login

  - task: Docker@2
    inputs:
      containerRegistry: 'Docker'
      repository: 'tomascastrogonzalez/microservicio-spring'
      command: 'build'
      Dockerfile: '**/Dockerfile'
    displayName: Docker Build

  - task: Docker@2
    inputs:
      containerRegistry: 'Docker'
      repository: 'tomascastrogonzalez/microservicio-spring'
      command: 'push'
    displayName: Docker Push

- job:
  dependsOn: 'Build'
  pool: 'Default'
  displayName: Kubernetes
  steps:
  
  - task: Kubernetes@1
    inputs:
      connectionType: 'None'
      command: 'apply'
      arguments: '-f deployment-app.yaml'
      secretType: 'dockerRegistry'
      containerRegistryType: 'Azure Container Registry'

  - script: kubectl port-forward deploy/microservicio-spring-deployment 8084:8080

#  - task: CmdLine@2
#    inputs:
#      script: |
#        jmeter -n -t microservicio-spring.jmx -l resultados.jtl
#    displayName: Run JMeter


#  - task: TaurusRunner@0
#    inputs:
#      taurusConfig: |
#        execution:
#          scenario:
#            request:
#              script: microservicio-spring.jmx
#      jmeterHome: '$(JMeterInstaller.JMeterHome)'
#      jmeterPath: '$(JMeterInstaller.JMeterPath)'
#      jmeterVersion: '4.0'
#      outputDir: 'taurus-output'
