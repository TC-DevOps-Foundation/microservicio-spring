# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- feature-ms-TomasCastro-mensaje

pool:
  vmImage: ubuntu-latest

steps:

- script: |
      git fetch --unshallow
  displayName: 'convert to non-shallow clone' 


- task: Gradle@3
  inputs:
    gradleWrapperFile: 'gradlew'
    tasks: 'build jacocoTestReport'
    publishJUnitResults: true
    testResultsFiles: '**/TEST-*.xml'
    javaHomeOption: 'JDKVersion'
    sonarQubeRunAnalysis: false
    spotBugsAnalysis: false
  displayName: Build


- task: PublishCodeCoverageResults@1
  inputs:
    codeCoverageTool: 'JaCoCo'
    summaryFileLocation: '$(System.DefaultWorkingDirectory)/build/reports/jacoco/test/jacocoTestReport.xml'
    pathToSources: '$(System.DefaultWorkingDirectory)/src/main/java/'
    reportDirectory: '$(System.DefaultWorkingDirectory)/build/reports/jacoco/test'
    failIfCoverageEmpty: true

- task: PowerShell@2
#  inputs:
#      targetType: 'inline'
#      script: |
#        $htmlReportPath = "$(System.DefaultWorkingDirectory)/build/jacocoHtml/test/html/index.html"
#        Write-Host "HTML report path: $htmlReportPath"  # Add this line to log the path
#        $coverageDataXml = Get-Content -Path "$(System.DefaultWorkingDirectory)/build/reports/jacoco/test/jacocoTestReport.xml" -Raw
#        Write-Host "XML report : $coverageDataXml"
#        $coverageData = Get-Content -Path "$(System.DefaultWorkingDirectory)/build/jacocoHtml/test/html/index.html" -Raw
#        # Realiza el análisis del archivo HTML para obtener los datos de cobertura necesarios
#        # Puedes utilizar expresiones regulares o técnicas de manipulación de cadenas para extraer los datos específicos que necesitas
#        $pattern = 'class="ctr2">(\d+)%<\/td>'
#        $coverageLine = $coverageData | Select-String -Pattern $pattern | ForEach-Object { $_.Matches.Groups[1].Value }
#        $coverage = [int]$coverageLine
#        $minCoverageThreshold = "$(min_coverage)"
#        Write-Host "Code coverage minimum $minCoverageThreshold% actual ($coverage%). ."#Comentar luego
#        if ($coverage -lt $minCoverageThreshold) {
#          Write-Host "Code coverage is below $minCoverageThreshold% ($coverage%). Failing the pipeline."
#          exit 1
#        } else {
#          Write-Host "Code coverage is above $minCoverageThreshold% ($coverage%)."
#        }
#  displayName: 'Check code coverage JaCoCoReport'


#- task: SonarCloudPrepare@1
#  inputs:
#    SonarCloud: 'Sonar-Azure'
#    organization: 'tc-devops-foundation'
#    scannerMode: 'MSBuild'
#    projectKey: 'TC-DevOps-Foundation_microservicio-spring'
#    projectName: 'microservicio-spring'
#  displayName: SonarCloud

#- task: Gradle@3
#  inputs:
#    gradleWrapperFile: 'gradlew'
##    workingDirectory: '$(Build.SourcesDirectory)'
#    publishJUnitResults: true
#    testResultsFiles: '*/TEST-.xml'
#    javaHomeOption: 'JDKVersion'
#    sonarQubeRunAnalysis: false
#    spotBugsAnalysis: false
#  displayName: 'Run test'

#- task: Gradle@3
#  inputs:
#    gradleWrapperFile: 'gradlew'
#    tasks: 'sonar'
#    publishJUnitResults: false
#    javaHomeOption: 'JDKVersion'
#    sonarQubeRunAnalysis: true
#    sqGradlePluginVersionChoice: 'specify'
#    sonarQubeGradlePluginVersion: '3.3'
#    spotBugsAnalysis: false

#- task: Docker@2
#  inputs:
#    containerRegistry: 'Docker'
#    command: 'login'
#  displayName: Docker Login

#- task: Docker@2
#  inputs:
#    containerRegistry: 'Docker'
#    repository: 'tomascastrogonzalez/microservicio-spring'
#    command: 'build'
#    Dockerfile: '**/Dockerfile'
#  displayName: Docker Build

#- task: Docker@2
#  inputs:
#    containerRegistry: 'Docker'
#    repository: 'tomascastrogonzalez/microservicio-spring'
#    command: 'push'
#  displayName: Docker Push

- task: CmdLine@2
  inputs:
    script: |
      jmeter -n -t microservicio-spring.jmx -l resultados.jtl
  displayName: Run JMeter


- task: TaurusRunner@0
  inputs:
    taurusConfig: |
      execution:
        scenario:
          request:
            script: microservicio-spring.jmx
    jmeterHome: '$(JMeterInstaller.JMeterHome)'
    jmeterPath: '$(JMeterInstaller.JMeterPath)'
    jmeterVersion: '4.0'
    outputDir: 'taurus-output'
